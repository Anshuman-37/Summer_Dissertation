## Header Files
import tensorflow as tf
from tensorflow.keras.layers import Conv3D, Dropout, MaxPooling3D, concatenate, UpSampling3D
print(tf.config.list_physical_devices('GPU'))
print(tf.__version__)
print("imported tensorflow") 



### Model 1  UNET
def unet_model(input_size):

    '''This is the custom unet architecture designed for the code'''
    unet_inputs = tf.keras.Input(input_size)#(64,72,64,2))#
    conv1 = Conv3D(32, (3,3,3), activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(unet_inputs)
    conv1 = Conv3D(32, (3,3,3), activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv1)
    drop1 = Dropout(0.5)(conv1)
    pool1 = MaxPooling3D(pool_size=(2, 2, 2))(drop1)

    conv2 = Conv3D(32, (3,3,3), activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(pool1)
    conv2 = Conv3D(64, (3,3,3), activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv2)
    drop2 = Dropout(0.5)(conv2)
    pool2 = MaxPooling3D(pool_size=(2, 2, 2))(drop2)

    conv3 = Conv3D(64, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(pool2)
    conv3 = Conv3D(128, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv3)
    drop3 = Dropout(0.5)(conv3)
    pool3 = MaxPooling3D(pool_size=(2, 2, 2))(drop3)

    conv4 = Conv3D(128, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(pool3)
    conv4 = Conv3D(256, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv4)
    drop4 = Dropout(0.5)(conv4)

    up5 = Conv3D(128, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(UpSampling3D(size = (2,2,2))(drop4))
    merge5 = concatenate([drop3,up5], axis = 4)
    conv5 = Conv3D(128, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(merge5)
    conv5 = Conv3D(128, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv5)

    up6 = Conv3D(64, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(UpSampling3D(size = (2,2,2))(conv5))
    merge6 = concatenate([drop2,up6], axis = 4)
    conv6 = Conv3D(64, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(merge6)
    conv6 = Conv3D(64, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv6)

    up7 = Conv3D(32, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(UpSampling3D(size = (2,2,2))(conv6))
    merge7 = concatenate([drop1,up7], axis = 4)
    conv7 = Conv3D(32, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(merge7)
    conv7 = Conv3D(32, 3, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv7)

    conv8 = Conv3D(1, 1, activation = 'relu', use_bias=True, padding = 'same', kernel_initializer = 'he_normal')(conv7)

    model = tf.keras.Model(inputs = unet_inputs, outputs = conv8)
    # model.summary()
    return model




## Main Driver of MODEL.py
def get_model(name,input_size):
    '''This function aims to return the specified model back to the driver code'''
    if name == 'unet':
        return unet_model(input_size)